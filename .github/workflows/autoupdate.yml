name: CI

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  schedule:
    - cron: '30 2 * * *'  # Run once per day

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unciv-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: oxipng image compression # This needs to be before the Unciv run since that packs images
        # TEMPORARILY REMOVED 'continue-on-error: true' for debugging.
        # This step will now fail if oxipng encounters an error, showing more details.
        run: |
          set -x # Enable shell debugging: print commands and their arguments as they are executed.

          echo "--- Starting oxipng image compression step ---"
          echo "Current directory: $(pwd)"
          echo "Listing contents of current directory:"
          ls -lA

          echo "--- Downloading oxipng ---"
          oxipng_url=$(curl -s https://api.github.com/repos/shssoichiro/oxipng/releases/latest | grep -o "http.*x86_64-unknown-linux-gnu.tar.gz")
          echo "Oxipng URL: $oxipng_url"
          wget -O oxipng.tar.gz "$oxipng_url" # Added quotes to URL for robustness
          echo "Listing downloaded tarball:"
          ls -l oxipng.tar.gz

          echo "--- Extracting oxipng ---"
          tar -xvzf oxipng.tar.gz
          rm oxipng.tar.gz
          echo "Listing extracted files/folders (should contain oxipng executable folder):"
          ls -lA

          # Find the oxipng executable. More robust find command.
          # It looks for a file named "oxipng" that has execute permissions, and then gets its basename.
          oxipng_executable_path=$(find . -type f -name "oxipng" -perm /u=x)
          if [ -z "$oxipng_executable_path" ]; then
              echo "Error: oxipng executable not found after extraction!"
              exit 1 # Exit with error if executable not found
          fi
          echo "Oxipng executable found at: $oxipng_executable_path"

          echo "--- Searching for PNG files to compress ---"
          # List files that 'find' command will process.
          # The -regex ".*\.png" ensures only files ending with .png are matched.
          find_output=$(find Images* -type f -regex ".*\.png")
          echo "Files found by 'find Images* -type f -regex \".*\\.png\" (should be empty if no images):"
          echo "$find_output"
          echo "--- End of PNG file search ---"

          if [ -z "$find_output" ]; then
              echo "No PNG files found in Images* directories. oxipng will be called without target files."
              # If no files found, let oxipng run without arguments.
              # This might cause it to print usage and exit with a non-zero code.
              # If we want to skip if no files are found, we'd uncomment 'exit 0' below.
              # echo "No PNG files to process. Skipping oxipng compression."
              # exit 0
              "$oxipng_executable_path" --version # Just run it to check if the executable itself works
          else
              echo "--- Running oxipng on found files ---"
              # Process files one by one to better isolate which one causes an error, if any.
              # This replaces the xargs command for better debugging.
              while IFS= read -r file; do
                  echo "Attempting to process file: $file"
                  # Added quotes around "$file" to handle spaces or special characters in filenames.
                  "$oxipng_executable_path" --opt max --strip all --alpha "$file" || { echo "ERROR: oxipng failed to process $file. Check image validity."; exit 1; }
              done <<< "$find_output"
          fi

          echo "--- Cleaning up oxipng files ---"
          # This command removes the downloaded oxipng folder (e.g., oxipng-version-arch)
          rm -rf "$(ls -1d oxipng-* 2>/dev/null)" || true # Use -1d for directories and suppress error if none found

          echo "--- oxipng image compression step completed ---"

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # Runs a set of commands using the runners shell
      - name: Autoupdate
        continue-on-error: true  # We want to autoupdate even if there are errors
        run: |
          unciv_url=$(curl -s https://api.github.com/repos/yairm210/unciv/releases/latest | grep -o "http.*Unciv.jar")
          wget -q -O Unciv.jar "$unciv_url" # Added quotes to URL for robustness
          java -jar Unciv.jar mod-ci

      - name: Remove Unciv executable
        run: rm Unciv.jar

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Autoupdate
